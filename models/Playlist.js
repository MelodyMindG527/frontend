const mongoose = require('mongoose');

const playlistSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'Playlist name is required'],
    trim: true,
    maxlength: [100, 'Playlist name cannot exceed 100 characters']
  },
  description: {
    type: String,
    trim: true,
    maxlength: [500, 'Description cannot exceed 500 characters']
  },
  owner: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  songs: [{
    song: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Song',
      required: true
    },
    addedAt: {
      type: Date,
      default: Date.now
    }
  }],
  coverImage: {
    type: String,
    default: null
  },
  isPublic: {
    type: Boolean,
    default: false
  },
  isAutoGenerated: {
    type: Boolean,
    default: false
  },
  generatedFor: {
    mood: {
      type: String,
      enum: ['happy', 'sad', 'energetic', 'calm', 'anxious', 'excited', 'melancholic', 'focused']
    },
    tempo: {
      type: String,
      enum: ['slow', 'medium', 'fast']
    },
    genre: {
      type: String
    }
  },
  tags: [{
    type: String,
    trim: true
  }],
  playCount: {
    type: Number,
    default: 0
  },
  likes: {
    type: Number,
    default: 0
  },
  followers: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  }],
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  }
});

// Update the updatedAt field before saving
playlistSchema.pre('save', function(next) {
  this.updatedAt = Date.now();
  next();
});

// Index for better search performance
playlistSchema.index({ name: 'text', description: 'text' });
playlistSchema.index({ owner: 1 });
playlistSchema.index({ isPublic: 1 });

// Virtual for song count
playlistSchema.virtual('songCount').get(function() {
  return this.songs.length;
});

// Virtual for total duration
playlistSchema.virtual('totalDuration').get(function() {
  return this.songs.reduce((total, item) => {
    return total + (item.song.duration || 0);
  }, 0);
});

// Method to add song to playlist
playlistSchema.methods.addSong = function(songId) {
  const existingSong = this.songs.find(item => item.song.toString() === songId.toString());
  if (!existingSong) {
    this.songs.push({ song: songId });
  }
  return this.save();
};

// Method to remove song from playlist
playlistSchema.methods.removeSong = function(songId) {
  this.songs = this.songs.filter(item => item.song.toString() !== songId.toString());
  return this.save();
};

// Increment play count
playlistSchema.methods.incrementPlayCount = function() {
  this.playCount += 1;
  return this.save();
};

module.exports = mongoose.model('Playlist', playlistSchema);